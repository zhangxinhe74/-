 <script>
    let arr = [
      [1 ,2 ,3, 4,5 ],
      [6, 7,8, 9,10 ],
      [11,12,13,14,15],
      [16,17,18,19,20],
    ]
  
    const findNumberIn = function(arr,target) {
      return arr.flat(Infinity).includes(target);
    }
    console.log(findNumberIn(arr,10))


    1 //首先判断数组是不是数组
      const findNumberIn2DArray = function(matrix,target){
        const isArray = Array.isArray(matrix);
        if(!isArray) throw TypeError('传入的不是数组');
        const colLength = matrix.length;
        if(colLength === 0) return false;
       const rowLength = matrix[0].length;
       const sortCount = Math.min(colLength,rowLength);
       for(let i = 0;i<sortCount;i++){
        const rowFound = binarySearchInRow(matrix, i ,target);
        const colFound = binarySearchInCol(matrix,i,target);
        if(rowFound || colFound){
          return true;
        }
       } 
       return false
      }
    // 3 创建两个指针
    const binarySearchInRow = (matrix,row,target) => {
      let lo = row;
      let hi = matrix[row].length - 1;
      while(lo<=hi){
        let mid = lo + Math.floor((hi-lo)/2)
        if(matrix[row][mid] === target){
          return true
        }else if(matrix[row][mid]<target){
          lo = mid + 1
        }else {
          hi = min - 1
        }
      }
      return false
    }
    const binarySearchInCol = (matrix,col,target) => {
      let le = col;
      let hi = matrix.length - 1;

      while(le<=hi){
        let mid = le + Math.floor((le + hi) / 2);
        if(matrix[col][mid] === target){
          return true
        }else if(matrix[col][mid]<target){
          le = mid + 1;
        }else{
          le = mid - 1;
        }
      }
    }
    console.log(findNumberIn2DArray(arr, 5))
    console.log(findNumberIn2DArray(arr, 20))
  </script>